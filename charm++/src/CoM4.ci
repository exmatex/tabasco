mainmodule CoM4 {

  include "types.hpp";

  readonly CProxy_Main mainProxy;                    // central controller
  readonly CProxy_Domain domainArray;                // array of domains of elements
  readonly CProxy_CoarseScaleModel coarseScaleArray; // array of domain coarse scale models
  readonly CProxy_FineScaleModel fineScaleArray;     // array of fine scale models
  readonly CProxy_NearestNeighborSearch nnsArray;    // array of nearest neighbor searches
  readonly CProxy_Interpolate interpolateArray;      // array of interpolations
  readonly CProxy_DBInterface DBArray;               // array of DB interfaces

  message Msg;

  // Main driver
  mainchare Main {
    entry Main(CkArgMsg *msg);
    entry void done();
  };

  // Domains of elements
  array [3D] Domain {
    entry Domain();
    entry void run();
    entry void haloExchange();
  };

  // Coarse scale model - Lulesh
  array [3D] CoarseScaleModel {
    entry CoarseScaleModel();
    entry void startElementFineScaleQuery(int nstep, int nelems);
    //entry void receiveNewPoint(int whichEl, int whichIter, int newPt);
    entry [nokeep] void receiveNewPoint(Msg *m);
    entry void updateElement(int whichEl, int whichIter, int newPt);

    entry void run(int ntimesteps, int nelems)
    {
      for (tstep = 0; tstep < ntimesteps; tstep++) {
        // Start queries for all elements
        atomic {
          startElementFineScaleQuery(tstep, nelems);
        }

        // Process new points
        for (e = 0; e < nelems; e++) {
          //when receiveNewPoint(int whichEl, int whichIter, int newPt) atomic {
          when receiveNewPoint(Msg *m) atomic {
            updateElement(m->whichEl, m->whichIter, m->newPt);
          }
        }
      } 

      // Time steps done
      atomic {
        mainProxy.done();
      }
    };
  };

  // Fine scale model
  array [4D] FineScaleModel {
    entry FineScaleModel();
    entry void evaluate(int qPt);
    entry void query2(int iter, int qPt);
    entry void requestNeighbors(int qPt);
    entry void receiveNeighbors(int nbrCount, int nbrData);
    entry void requestInterpolation(int nbrCount, int nbrData, int qPt);
    entry void requestDBStore(int newPt);
    entry void receivePoint(int newPt);
    entry void sendNewPoint2Coarse(int elnum, int iter, int newPt);

    entry [createhome] void query(int elnum, int iter, int qPt, CkCallback cb)

    {
      // Do nearest neighbor search
      atomic {
        requestNeighbors(qPt);
      }

      // Receive nearest neighbors, do interpolation if enough, else evaluation
      when receiveNeighbors(int nbrCount, int nbrData) atomic {
        if (nbrCount == NBR_LIMIT)
          requestInterpolation(nbrCount, nbrData, qPt);
        else
          evaluate(qPt);
      }

      // Receive results of interpolation or evaluate
      //  Save to DB and send back to Coarse Scale model
      when receivePoint(int cPt) atomic { 
        requestDBStore(cPt);
        Msg *m = new Msg();
        m->whichEl = elnum; m->whichIter = iter; m->newPt = cPt;
        cb.send(m);
      }

    };
  };

  // Nearest Neighbor Search 
  array [3D] NearestNeighborSearch {
    entry NearestNeighborSearch();
    entry void getIndex(int qPt, int nbrCount, int nbrIndex);
    entry void putIndex(int qPt, int nbrIndex);
    entry void requestDBGet(int nbrCount, int nbrIndex, int nbrData);
    entry void receiveData(int nbrCount, int nbrData);
    entry void sendNeighbors(int elnum, int nbrCount, int nbrData);

    entry void getNeighbors(int elnum, int qPt)
    {
      // Get available neighbors and their data
      atomic {
        getIndex(qPt, nbrCount, nbrIndex);
        requestDBGet(nbrCount, nbrIndex, nbrData);
      }

      // Once neighbor data is receive from DB, send to requestor
      when receiveData(int nbrCount, int nbrData) atomic {
        sendNeighbors(elnum, nbrCount, nbrData);
      }    
        
    };
  };

  // Interpolate 
  array [3D] Interpolate {
    entry Interpolate();
    entry void run(int elnum, int nbrCount, int nbrData, int qPt);
  };

  // DB interface
  array [3D] DBInterface {
    entry DBInterface();
    entry void put(int pcount, int pData);
    entry void get(int pCount, int pIndex, int pData);
  };
};
