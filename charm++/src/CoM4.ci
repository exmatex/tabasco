mainmodule CoM4 {

  include "types.hpp";

  readonly CProxy_Main mainProxy;                    // central controller
  readonly CProxy_Domain domainArray;                // array of domains of elements
  readonly CProxy_CoarseScaleModel coarseScaleArray; // array of domain coarse scale models
  readonly CProxy_FineScaleModel fineScaleArray;     // array of fine scale models
  readonly CProxy_NearestNeighborSearch nnsArray;    // array of nearest neighbor searches
  readonly CProxy_Interpolate interpolateArray;      // array of interpolations
  readonly CProxy_DBInterface DBArray;               // array of DB interfaces

  // Main driver
  mainchare Main {
    entry Main(CkArgMsg *msg);
    entry [threaded] void go(Input in);
    entry void done();
  };

  // Domains of elements
  array [3D] Domain {
    entry Domain();
    entry void run();
    entry void haloExchange();
  };

  // Coarse scale model - Lulesh
  array [3D] CoarseScaleModel {
    entry CoarseScaleModel();
    entry void startElementFineScaleQuery(int nstep, int nelems);
    entry void receiveNewPoint(int whichEl, int whichIter, int newPt);
    entry void updateElement(int whichEl, int whichIter, int newPt);

    entry void run(int ntimesteps, int nelems)
    {
      for (tstep = 0; tstep < ntimesteps; tstep++) {
        // Start queries for all elements
        atomic {
          startElementFineScaleQuery(tstep, nelems);
        }

        // Process new points
        for (e = 0; e < nelems; e++) {
          when receiveNewPoint(int whichEl, int whichIter, int newPt) atomic {
            updateElement(whichEl, whichIter, newPt);
          }
        }
      } 

      // Time steps done
      atomic {
        mainProxy.done();
      }
    };
  };

  // Fine scale model
  array [4D] FineScaleModel {
    entry FineScaleModel();
    entry void evaluate();
    entry void query2(int iter);

    entry void query(int iter)
    {
      atomic {
        query2(iter);
      }
    };
  };

  // Nearest Neighbor Search 
  array [3D] NearestNeighborSearch {
    entry NearestNeighborSearch();
    entry void getIndex();
    entry void putIndex();
    entry void getNeighbors();
    entry void get();
  };

  // Interpolate 
  array [3D] Interpolate {
    entry Interpolate();
    entry void run();
  };

  // DB interface
  array [3D] DBInterface {
    entry DBInterface();
    entry void get();
    entry void put();
  };
};
